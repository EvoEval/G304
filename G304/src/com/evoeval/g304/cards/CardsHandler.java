package com.evoeval.g304.cards;

import java.util.HashMap;

import com.evoeval.g304.ui.ImageAssetHandler;
import com.evoeval.g304.util.*;

import java.util.Random;

/**
 * 
 * Method to handle cards
 * @author EvoEval
 * @version 0.1.2
 * 
 * [Log]
 * 3:58 PM 5/25/2013 : comments , Bhathiya
 * 
 */

public class CardsHandler {
	
	//-------------------------------------------------
	//Constants
	//-------------------------------------------------
	// card types
	
	
	public final static float CARD_WIDTH  = 140.0f * 0.75f;
	public final static float CARD_HEIGHT = 194.0f * 0.75f;
	
	
	public final static String SPADES  = "+S";
	public final static String DIAMOND = "+D";
	public final static String CLUBS   = "+C";
	public final static String HEART   = "+H";
	//-------------------------------------------------
	// a single card 

	
	public final static String SPADES_JACK="SJ";
	public final static String SPADES_9="S9";
	public final static String SPADES_A="SA";
	public final static String SPADES_10="S0";
	public final static String SPADES_KING="SK";
	public final static String SPADES_QUEEN="SQ";
	public final static String SPADES_8="S8";
	public final static String SPADES_7="S7";	
	
	public final static String DIAMOND_JACK="DJ";
	public final static String DIAMOND_9="D9";
	public final static String DIAMOND_A="DA";
	public final static String DIAMOND_10="D0";
	public final static String DIAMOND_KING="DK";
	public final static String DIAMOND_QUEEN="DQ";
	public final static String DIAMOND_8="D8";
	public final static String DIAMOND_7="D7";
	
	public final static String CLUBS_JACK="CJ";
	public final static String CLUBS_9="C9";
	public final static String CLUBS_A="CA";
	public final static String CLUBS_10="C0";
	public final static String CLUBS_KING="CK";
	public final static String CLUBS_QUEEN="CQ";
	public final static String CLUBS_8="C8";
	public final static String CLUBS_7="C7";
	
	public final static String HEART_JACK="HJ";
	public final static String HEART_9="H9";
	public final static String HEART_A="HA";
	public final static String HEART_10="H0";
	public final static String HEART_KING="HK";
	public final static String HEART_QUEEN="HQ";
	public final static String HEART_8="H8";
	public final static String HEART_7="H7";
	
	public final static String CARD_BACK="BK";
	
	public final static String cardOrder[] = {
		SPADES_JACK,SPADES_9,SPADES_A,SPADES_10,SPADES_KING,SPADES_QUEEN,SPADES_8,SPADES_7,
		DIAMOND_JACK,DIAMOND_9,DIAMOND_A,DIAMOND_10,DIAMOND_KING,DIAMOND_QUEEN,DIAMOND_8,DIAMOND_7,
		CLUBS_JACK,CLUBS_9,CLUBS_A,CLUBS_10,CLUBS_KING,CLUBS_QUEEN,CLUBS_8,CLUBS_7,
		HEART_JACK,HEART_9,HEART_A,HEART_10,HEART_KING,HEART_QUEEN,HEART_8,HEART_7
		}; // order of cards. used in sorting cards.
	

	
	
	public static HashMap<String, ImageAssetHandler> cardImageSprites = null; // stores the card imagesprites
		
	public static String[] cardDeck=null; //stores the card deck
	
	/**
	 * this initializes the card deck must be called before shuffling
	 */
	public static void initializeDeck(){ // create a non-shuffled card deck
		cardDeck = new String[32];
		for(int i=0;i<32;i++){
			cardDeck[i]=cardOrder[i];
		}
		shuffle();shuffle();shuffle();shuffle();shuffle();
	}
	
	/**
	 * shuffle cards
	 */
	
    public static void shuffle(){ // shuffles the cardDeck
    	int p1=0,p2=0;
    	Random rand = new Random();
		// TODO : take the seed from the value generated by shaking of the phone ;
		String temp = "";
    	for(int i=0;i<32;i++){ // shuffle by swapping cards based on random integers
			p1 = rand.nextInt(32);
			p2 = rand.nextInt(32);
			temp=cardDeck[p1];
			cardDeck[p1]=cardDeck[p2];
			cardDeck[p2]=temp;
		}
    }
    
    /**
     * load card images
     */
    
	public static void loadCardImages(){  // load card images and store them in hash map
		
		cardImageSprites = new HashMap<String, ImageAssetHandler>();
		
		String path=Medium.getGameResolution()+"/Cards/";
		
		cardImageSprites.put(HEART_JACK, new ImageAssetHandler(path+ HEART_JACK +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(HEART_9, new ImageAssetHandler(path+ HEART_9 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(HEART_A, new ImageAssetHandler(path+ HEART_A +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(HEART_10, new ImageAssetHandler(path+ HEART_10 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(HEART_KING, new ImageAssetHandler(path+ HEART_KING +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(HEART_QUEEN, new ImageAssetHandler(path+ HEART_QUEEN +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(HEART_8, new ImageAssetHandler(path+ HEART_8 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(HEART_7, new ImageAssetHandler(path+ HEART_7 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));

		cardImageSprites.put(SPADES_JACK, new ImageAssetHandler(path+ SPADES_JACK +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(SPADES_9, new ImageAssetHandler(path+ SPADES_9 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(SPADES_A, new ImageAssetHandler(path+ SPADES_A +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(SPADES_10, new ImageAssetHandler(path+ SPADES_10 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(SPADES_KING, new ImageAssetHandler(path+ SPADES_KING +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(SPADES_QUEEN, new ImageAssetHandler(path+ SPADES_QUEEN +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(SPADES_8, new ImageAssetHandler(path+ SPADES_8 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(SPADES_7, new ImageAssetHandler(path+ SPADES_7 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		
		cardImageSprites.put(DIAMOND_JACK, new ImageAssetHandler(path+ DIAMOND_JACK +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(DIAMOND_9, new ImageAssetHandler(path+ DIAMOND_9 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(DIAMOND_A, new ImageAssetHandler(path+ DIAMOND_A +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(DIAMOND_10, new ImageAssetHandler(path+ DIAMOND_10 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(DIAMOND_KING, new ImageAssetHandler(path+ DIAMOND_KING +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(DIAMOND_QUEEN, new ImageAssetHandler(path+ DIAMOND_QUEEN +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(DIAMOND_8, new ImageAssetHandler(path+ DIAMOND_8 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(DIAMOND_7, new ImageAssetHandler(path+ DIAMOND_7 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		
		cardImageSprites.put(CLUBS_JACK, new ImageAssetHandler(path+ CLUBS_JACK +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(CLUBS_9, new ImageAssetHandler(path+ CLUBS_9 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(CLUBS_A, new ImageAssetHandler(path+ CLUBS_A +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(CLUBS_10, new ImageAssetHandler(path+ CLUBS_10 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(CLUBS_KING, new ImageAssetHandler(path+ CLUBS_KING +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(CLUBS_QUEEN, new ImageAssetHandler(path+ CLUBS_QUEEN +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(CLUBS_8, new ImageAssetHandler(path+ CLUBS_8 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		cardImageSprites.put(CLUBS_7, new ImageAssetHandler(path+ CLUBS_7 +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));

		cardImageSprites.put(CARD_BACK, new ImageAssetHandler(path+ CARD_BACK +".png", CARD_WIDTH, CARD_HEIGHT,  0,0,false));
		
	}
	
	public static void setDefault(){
		for(ImageAssetHandler img:cardImageSprites.values().toArray(new ImageAssetHandler[0])){
			img.resetSprite();
		}
		shuffle();shuffle();shuffle();shuffle();shuffle();
	}
	/**
	 * Get a card ImageSprite from given identifier
	 * @param cardIdentifier
	 * @return ImageSprite
	 */
	public static ImageAssetHandler getCardImageSprite(String cardIdentifier){ 
		return cardImageSprites.get(cardIdentifier);
	}
	
	/**
	 * get card type of a given card
	 * @param card card given
	 * @return card type
	 */
	public static String getCardType(String card){
		if(card.startsWith("C")){
			return CLUBS;
		}else if(card.startsWith("H")){
			return HEART;
		}else if(card.startsWith("D")){
			return DIAMOND;
		}else if(card.startsWith("S")){
			return SPADES;
		}
		return "";
	}
	
	
	/**
	 * 
	 * get the value for a given card (only for comparison)
	 * 
	 * @param card card in question
	 * @param trump trump card
	 * 
	 * @return value
	 */
	public static int getCardValueForComparision(String card,String trump){
		int v=0;
		if(card.endsWith("J")){
			v = 30;
		}else if(card.endsWith("9")){
			v = 20;
		}else if(card.endsWith("A")){
			v = 11;
		}else if(card.endsWith("0")){
			v = 10;
		}else if(card.endsWith("K")){
			v = 3;
		}else if(card.endsWith("Q")){
			v = 2;
		}else if(card.endsWith("8")){
			v = 1;
		}
		if(getCardType(trump).equals(getCardType(card))){
			v+=100;
		}
		return v;
	}
	/**
	 * 
	 * get the value for a given card (only for comparison)
	 * 
	 * @param card card in question
	 * 
	 * @return value
	 */
	public static int getCardValueForComparision(String card){
		int v=0;
		if(card.endsWith("J")){
			v = 30;
		}else if(card.endsWith("9")){
			v = 20;
		}else if(card.endsWith("A")){
			v = 11;
		}else if(card.endsWith("0")){
			v = 10;
		}else if(card.endsWith("K")){
			v = 3;
		}else if(card.endsWith("Q")){
			v = 2;
		}else if(card.endsWith("8")){
			v = 1;
		}
		return v;
	}
	
	/**
	 * get the value for the given card
	 * 
	 * @param card card in question
	 * 
	 * @return value
	 */
	
	public static int getCardValue(String card){
		int v=0;
		if(card.endsWith("J")){
			v = 30;
		}else if(card.endsWith("9")){
			v = 20;
		}else if(card.endsWith("A")){
			v = 11;
		}else if(card.endsWith("0")){
			v = 10;
		}else if(card.endsWith("K")){
			v = 3;
		}else if(card.endsWith("Q")){
			v = 2;
		}

		return v;
	}
	/**
	 * clean up the ImageSprite data
	 */
	public static void dispose(){
		for(ImageAssetHandler imgSp:cardImageSprites.values()){
			imgSp.dispose();
		}
	}
	
}
